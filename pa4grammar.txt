Program -> Declaration-list $
Declaration-list -> Declaration Declaration-list
Declaration-list -> ε 
Declaration -> Declaration-initial Declaration-prime
Declaration-initial ->  Type-specifier #define_id ID
Declaration-prime -> Fun-declaration-prime
Declaration-prime -> Var-declaration-prime
Var-declaration-prime -> ; #pop
Var-declaration-prime -> [ #pnum NUM ] #declare_array ; 
Fun-declaration-prime -> #func_def_start ( Params ) #label_func Compound-stmt #func_def_end
Type-specifier -> int
Type-specifier -> void
Params -> int #define_id ID Param-prime Param-list
Params -> void Param-list-void-abtar
Param-list-void-abtar -> #pid ID Param-prime Param-list
Param-list-void-abtar -> ε
Param-list -> , Param Param-list
Param-list -> ε
Param -> Declaration-initial Param-prime
Param-prime -> [  ] #arr_param
Param-prime -> ε
Compound-stmt -> { Declaration-list Statement-list }
Statement-list -> Statement Statement-list
Statement-list -> ε
Statement -> Expression-stmt
Statement -> Compound-stmt
Statement -> Selection-stmt
Statement -> Iteration-stmt
Statement -> Return-stmt
Statement -> For-stmt
Expression-stmt -> Expression ; #pop
Expression-stmt -> #break break ;
Expression-stmt -> ;
Selection-stmt -> if ( Expression ) #save Statement else #cond_jump Statement #jump
Iteration-stmt -> #break_save while ( #label Expression ) #save Statement #while
Return-stmt -> return Return-stmt-prime #return
Return-stmt-prime -> ; #return_void
Return-stmt-prime -> Expression ;
For-stmt -> #break_save for #pid ID = Vars #label_for #assign_vars Statement #jpf_for
Vars -> Var #vars_begin Var-zegond
Var-zegond -> , Var #var_zegond Var-zegond
Var-zegond -> #vars_end ε
Var -> #pid ID Var-prime
Expression -> Simple-expression-zegond
Expression -> #pid ID B
B -> = Expression #assign
B -> [ Expression ] #arr_element H
B -> Simple-expression-prime
H -> = Expression #assign
H -> G D C
Simple-expression-zegond -> Additive-expression-zegond C
Simple-expression-prime -> Additive-expression-prime C
C -> Relop Additive-expression #arithmetic_op
C -> ε
Relop -> #symbol <
Relop -> #symbol ==
Additive-expression -> Term D
Additive-expression-prime -> Term-prime D
Additive-expression-zegond -> Term-zegond D
D -> Addop Term #arithmetic_op D
D -> ε
Addop -> #symbol +
Addop -> #symbol -
Term -> Signed-factor G
Term-prime -> Signed-factor-prime G
Term-zegond -> Signed-factor-zegond G
G -> #symbol * Signed-factor #arithmetic_op G
G -> ε
Signed-factor -> #symbol + Factor #signed_num
Signed-factor -> #symbol - Factor #signed_num
Signed-factor -> Factor
Signed-factor-prime -> Factor-prime
Signed-factor-zegond -> #symbol + Factor #signed_num
Signed-factor-zegond -> #symbol - Factor #signed_num
Signed-factor-zegond -> Factor-zegond
Factor -> ( Expression )
Factor -> #pid ID Var-call-prime
Factor -> #pnum NUM
Var-call-prime -> #func_call_start ( Args ) #func_call_end
Var-call-prime -> Var-prime
Var-prime -> [ Expression ] #arr_element
Var-prime -> ε
Factor-prime -> #func_call_start ( Args ) #func_call_end
Factor-prime -> ε
Factor-zegond -> ( Expression )
Factor-zegond -> #pnum NUM
Args -> Arg-list
Args -> ε
Arg-list -> Expression Arg-list-prime
Arg-list-prime -> , Expression Arg-list-prime
Arg-list-prime -> ε
